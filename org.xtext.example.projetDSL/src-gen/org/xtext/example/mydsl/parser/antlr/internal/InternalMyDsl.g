/*
 * generated by Xtext 2.15.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Automate";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleAutomate
entryRuleAutomate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAutomateRule()); }
	iv_ruleAutomate=ruleAutomate
	{ $current=$iv_ruleAutomate.current; }
	EOF;

// Rule Automate
ruleAutomate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getAutomateAccess().getProgramProgramParserRuleCall_0());
			}
			lv_program_0_0=ruleProgram
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getAutomateRule());
				}
				set(
					$current,
					"program",
					lv_program_0_0,
					"org.xtext.example.mydsl.MyDsl.Program");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='start'
		{
			newLeafNode(otherlv_0, grammarAccess.getProgramAccess().getStartKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getProgramAccess().getInitParserRuleCall_1());
		}
		ruleInit
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getStatsStatementParserRuleCall_2_0());
				}
				lv_stats_2_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"stats",
						lv_stats_2_0,
						"org.xtext.example.mydsl.MyDsl.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='end'
		{
			newLeafNode(otherlv_3, grammarAccess.getProgramAccess().getEndKeyword_3());
		}
	)
;

// Entry rule entryRuleInit
entryRuleInit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getInitRule()); }
	iv_ruleInit=ruleInit
	{ $current=$iv_ruleInit.current.getText(); }
	EOF;

// Rule Init
ruleInit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='open browser'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getInitAccess().getOpenBrowserKeyword());
	}
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getInstructionParserRuleCall_0());
		}
		this_Instruction_0=ruleInstruction
		{
			$current = $this_Instruction_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getTabParserRuleCall_1());
		}
		this_Tab_1=ruleTab
		{
			$current = $this_Tab_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getFonctionParserRuleCall_2());
		}
		this_Fonction_2=ruleFonction
		{
			$current = $this_Fonction_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getVerifyParserRuleCall_3());
		}
		this_Verify_3=ruleVerify
		{
			$current = $this_Verify_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getForeachParserRuleCall_4());
		}
		this_Foreach_4=ruleForeach
		{
			$current = $this_Foreach_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTab
entryRuleTab returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTabRule()); }
	iv_ruleTab=ruleTab
	{ $current=$iv_ruleTab.current; }
	EOF;

// Rule Tab
ruleTab returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTabAccess().getVVariableParserRuleCall_0_0());
				}
				lv_v_0_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTabRule());
					}
					set(
						$current,
						"v",
						lv_v_0_0,
						"org.xtext.example.mydsl.MyDsl.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getTabAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				lv_values_2_0=RULE_STRING
				{
					newLeafNode(lv_values_2_0, grammarAccess.getTabAccess().getValuesSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTabRule());
					}
					addWithLastConsumed(
						$current,
						"values",
						lv_values_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_3=', '
			{
				newLeafNode(otherlv_3, grammarAccess.getTabAccess().getCommaSpaceKeyword_3_0());
			}
			(
				(
					lv_values_4_0=RULE_STRING
					{
						newLeafNode(lv_values_4_0, grammarAccess.getTabAccess().getValuesSTRINGTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTabRule());
						}
						addWithLastConsumed(
							$current,
							"values",
							lv_values_4_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)*
		otherlv_5=']'
		{
			newLeafNode(otherlv_5, grammarAccess.getTabAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInstructionRule()); }
	iv_ruleInstruction=ruleInstruction
	{ $current=$iv_ruleInstruction.current; }
	EOF;

// Rule Instruction
ruleInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getInstructionAccess().getCmdCommandeParserRuleCall_0_0());
				}
				lv_cmd_0_0=ruleCommande
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInstructionRule());
					}
					set(
						$current,
						"cmd",
						lv_cmd_0_0,
						"org.xtext.example.mydsl.MyDsl.Commande");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getInstructionAccess().getObjObjetParserRuleCall_1_0());
				}
				lv_obj_1_0=ruleObjet
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInstructionRule());
					}
					set(
						$current,
						"obj",
						lv_obj_1_0,
						"org.xtext.example.mydsl.MyDsl.Objet");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				(
					lv_param_2_0=RULE_STRING
					{
						newLeafNode(lv_param_2_0, grammarAccess.getInstructionAccess().getParamSTRINGTerminalRuleCall_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getInstructionRule());
						}
						setWithLastConsumed(
							$current,
							"param",
							lv_param_2_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			    |
			(
				(
					lv_param_3_0=RULE_ID
					{
						newLeafNode(lv_param_3_0, grammarAccess.getInstructionAccess().getParamIDTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getInstructionRule());
						}
						setWithLastConsumed(
							$current,
							"param",
							lv_param_3_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleFonction
entryRuleFonction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFonctionRule()); }
	iv_ruleFonction=ruleFonction
	{ $current=$iv_ruleFonction.current; }
	EOF;

// Rule Fonction
ruleFonction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFonctionAccess().getVarVariableParserRuleCall_0_0());
				}
				lv_var_0_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFonctionRule());
					}
					set(
						$current,
						"var",
						lv_var_0_0,
						"org.xtext.example.mydsl.MyDsl.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='countResult'
			{
				newLeafNode(otherlv_1, grammarAccess.getFonctionAccess().getCountResultKeyword_1_0());
			}
			    |
			(
				otherlv_2='readtext('
				{
					newLeafNode(otherlv_2, grammarAccess.getFonctionAccess().getReadtextKeyword_1_1_0());
				}
				(
					(
						lv_value_3_0=RULE_STRING
						{
							newLeafNode(lv_value_3_0, grammarAccess.getFonctionAccess().getValueSTRINGTerminalRuleCall_1_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getFonctionRule());
							}
							setWithLastConsumed(
								$current,
								"value",
								lv_value_3_0,
								"org.eclipse.xtext.common.Terminals.STRING");
						}
					)
				)
				otherlv_4=')'
				{
					newLeafNode(otherlv_4, grammarAccess.getFonctionAccess().getRightParenthesisKeyword_1_1_2());
				}
			)
			    |
			(
				otherlv_5='readurl('
				{
					newLeafNode(otherlv_5, grammarAccess.getFonctionAccess().getReadurlKeyword_1_2_0());
				}
				(
					(
						lv_value_6_0=RULE_STRING
						{
							newLeafNode(lv_value_6_0, grammarAccess.getFonctionAccess().getValueSTRINGTerminalRuleCall_1_2_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getFonctionRule());
							}
							setWithLastConsumed(
								$current,
								"value",
								lv_value_6_0,
								"org.eclipse.xtext.common.Terminals.STRING");
						}
					)
				)
				otherlv_7=')'
				{
					newLeafNode(otherlv_7, grammarAccess.getFonctionAccess().getRightParenthesisKeyword_1_2_2());
				}
			)
		)
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='var'
			{
				newLeafNode(otherlv_0, grammarAccess.getVariableAccess().getVarKeyword_0());
			}
		)?
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getVariableAccess().getEqualsSignKeyword_2());
		}
	)
;

// Entry rule entryRuleVerify
entryRuleVerify returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVerifyRule()); }
	iv_ruleVerify=ruleVerify
	{ $current=$iv_ruleVerify.current; }
	EOF;

// Rule Verify
ruleVerify returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='verify'
		{
			newLeafNode(otherlv_0, grammarAccess.getVerifyAccess().getVerifyKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getVerifyAccess().getCompareCompareParserRuleCall_1_0_0());
					}
					lv_compare_1_0=ruleCompare
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVerifyRule());
						}
						set(
							$current,
							"compare",
							lv_compare_1_0,
							"org.xtext.example.mydsl.MyDsl.Compare");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getVerifyAccess().getContainsContainsParserRuleCall_1_1_0());
					}
					lv_contains_2_0=ruleContains
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVerifyRule());
						}
						set(
							$current,
							"contains",
							lv_contains_2_0,
							"org.xtext.example.mydsl.MyDsl.Contains");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleCompare
entryRuleCompare returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompareRule()); }
	iv_ruleCompare=ruleCompare
	{ $current=$iv_ruleCompare.current; }
	EOF;

// Rule Compare
ruleCompare returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_variable_0_0=RULE_ID
				{
					newLeafNode(lv_variable_0_0, grammarAccess.getCompareAccess().getVariableIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCompareRule());
					}
					setWithLastConsumed(
						$current,
						"variable",
						lv_variable_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='=='
		{
			newLeafNode(otherlv_1, grammarAccess.getCompareAccess().getEqualsSignEqualsSignKeyword_1());
		}
		(
			(
				(
					lv_value_2_0=RULE_ID
					{
						newLeafNode(lv_value_2_0, grammarAccess.getCompareAccess().getValueIDTerminalRuleCall_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCompareRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			    |
			(
				(
					lv_value_3_0=RULE_STRING
					{
						newLeafNode(lv_value_3_0, grammarAccess.getCompareAccess().getValueSTRINGTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCompareRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_3_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleContains
entryRuleContains returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContainsRule()); }
	iv_ruleContains=ruleContains
	{ $current=$iv_ruleContains.current; }
	EOF;

// Rule Contains
ruleContains returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='contains'
		{
			newLeafNode(otherlv_0, grammarAccess.getContainsAccess().getContainsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getContainsAccess().getObjObjetParserRuleCall_1_0());
				}
				lv_obj_1_0=ruleObjet
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContainsRule());
					}
					set(
						$current,
						"obj",
						lv_obj_1_0,
						"org.xtext.example.mydsl.MyDsl.Objet");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_value_2_0=RULE_ID
					{
						newLeafNode(lv_value_2_0, grammarAccess.getContainsAccess().getValueIDTerminalRuleCall_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getContainsRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			    |
			(
				(
					lv_value_3_0=RULE_STRING
					{
						newLeafNode(lv_value_3_0, grammarAccess.getContainsAccess().getValueSTRINGTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getContainsRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_3_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleObjet
entryRuleObjet returns [String current=null]:
	{ newCompositeNode(grammarAccess.getObjetRule()); }
	iv_ruleObjet=ruleObjet
	{ $current=$iv_ruleObjet.current.getText(); }
	EOF;

// Rule Objet
ruleObjet returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='link'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getObjetAccess().getLinkKeyword_0());
		}
		    |
		kw='text'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getObjetAccess().getTextKeyword_1());
		}
		    |
		kw='button'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getObjetAccess().getButtonKeyword_2());
		}
		    |
		kw='image'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getObjetAccess().getImageKeyword_3());
		}
		    |
		kw='all'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getObjetAccess().getAllKeyword_4());
		}
		    |
		kw='title'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getObjetAccess().getTitleKeyword_5());
		}
		    |
		kw='combobox'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getObjetAccess().getComboboxKeyword_6());
		}
		    |
		kw='everything'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getObjetAccess().getEverythingKeyword_7());
		}
	)
;

// Entry rule entryRuleCommande
entryRuleCommande returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCommandeRule()); }
	iv_ruleCommande=ruleCommande
	{ $current=$iv_ruleCommande.current.getText(); }
	EOF;

// Rule Commande
ruleCommande returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='click'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCommandeAccess().getClickKeyword_0());
		}
		    |
		kw='uncheck'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCommandeAccess().getUncheckKeyword_1());
		}
		    |
		kw='search'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCommandeAccess().getSearchKeyword_2());
		}
		    |
		kw='choose'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCommandeAccess().getChooseKeyword_3());
		}
		    |
		kw='url'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCommandeAccess().getUrlKeyword_4());
		}
		    |
		kw='check'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCommandeAccess().getCheckKeyword_5());
		}
	)
;

// Entry rule entryRuleForeach
entryRuleForeach returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForeachRule()); }
	iv_ruleForeach=ruleForeach
	{ $current=$iv_ruleForeach.current; }
	EOF;

// Rule Foreach
ruleForeach returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='foreach'
		{
			newLeafNode(otherlv_0, grammarAccess.getForeachAccess().getForeachKeyword_0());
		}
		(
			(
				lv_value_1_0=RULE_ID
				{
					newLeafNode(lv_value_1_0, grammarAccess.getForeachAccess().getValueIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getForeachRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getForeachAccess().getStatsStatementParserRuleCall_2_0());
				}
				lv_stats_2_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForeachRule());
					}
					add(
						$current,
						"stats",
						lv_stats_2_0,
						"org.xtext.example.mydsl.MyDsl.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='endforeach'
		{
			newLeafNode(otherlv_3, grammarAccess.getForeachAccess().getEndforeachKeyword_3());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
