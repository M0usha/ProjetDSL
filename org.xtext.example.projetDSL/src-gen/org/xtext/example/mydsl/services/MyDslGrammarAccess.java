/*
 * generated by Xtext 2.15.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class AutomateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Automate");
		private final Assignment cProgramAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cProgramProgramParserRuleCall_0 = (RuleCall)cProgramAssignment.eContents().get(0);
		
		//Automate:
		//	program=Program;
		@Override public ParserRule getRule() { return rule; }
		
		//program=Program
		public Assignment getProgramAssignment() { return cProgramAssignment; }
		
		//Program
		public RuleCall getProgramProgramParserRuleCall_0() { return cProgramProgramParserRuleCall_0; }
	}
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cInitParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cStatsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatsStatementParserRuleCall_2_0 = (RuleCall)cStatsAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Program:
		//	'start'
		//	Init
		//	stats+=Statement*
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'start' Init stats+=Statement* 'end'
		public Group getGroup() { return cGroup; }
		
		//'start'
		public Keyword getStartKeyword_0() { return cStartKeyword_0; }
		
		//Init
		public RuleCall getInitParserRuleCall_1() { return cInitParserRuleCall_1; }
		
		//stats+=Statement*
		public Assignment getStatsAssignment_2() { return cStatsAssignment_2; }
		
		//Statement
		public RuleCall getStatsStatementParserRuleCall_2_0() { return cStatsStatementParserRuleCall_2_0; }
		
		//'end'
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}
	public class InitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Init");
		private final Keyword cOpenBrowserKeyword = (Keyword)rule.eContents().get(1);
		
		//Init:
		//	'open browser';
		@Override public ParserRule getRule() { return rule; }
		
		//'open browser'
		public Keyword getOpenBrowserKeyword() { return cOpenBrowserKeyword; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInstructionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTabParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFonctionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVerifyParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cForeachParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Statement:
		//	Instruction | Tab | Fonction | Verify | Foreach;
		@Override public ParserRule getRule() { return rule; }
		
		//Instruction | Tab | Fonction | Verify | Foreach
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Instruction
		public RuleCall getInstructionParserRuleCall_0() { return cInstructionParserRuleCall_0; }
		
		//Tab
		public RuleCall getTabParserRuleCall_1() { return cTabParserRuleCall_1; }
		
		//Fonction
		public RuleCall getFonctionParserRuleCall_2() { return cFonctionParserRuleCall_2; }
		
		//Verify
		public RuleCall getVerifyParserRuleCall_3() { return cVerifyParserRuleCall_3; }
		
		//Foreach
		public RuleCall getForeachParserRuleCall_4() { return cForeachParserRuleCall_4; }
	}
	public class TabElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Tab");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVVariableParserRuleCall_0_0 = (RuleCall)cVAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesSTRINGTerminalRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaSpaceKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuesSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cValuesAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Tab:
		//	v=Variable '[' values+=STRING (', ' values+=STRING)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//v=Variable '[' values+=STRING (', ' values+=STRING)* ']'
		public Group getGroup() { return cGroup; }
		
		//v=Variable
		public Assignment getVAssignment_0() { return cVAssignment_0; }
		
		//Variable
		public RuleCall getVVariableParserRuleCall_0_0() { return cVVariableParserRuleCall_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//values+=STRING
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }
		
		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_2_0() { return cValuesSTRINGTerminalRuleCall_2_0; }
		
		//(', ' values+=STRING)*
		public Group getGroup_3() { return cGroup_3; }
		
		//', '
		public Keyword getCommaSpaceKeyword_3_0() { return cCommaSpaceKeyword_3_0; }
		
		//values+=STRING
		public Assignment getValuesAssignment_3_1() { return cValuesAssignment_3_1; }
		
		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_3_1_0() { return cValuesSTRINGTerminalRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Instruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCmdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCmdCommandeParserRuleCall_0_0 = (RuleCall)cCmdAssignment_0.eContents().get(0);
		private final Assignment cObjAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cObjObjetParserRuleCall_1_0 = (RuleCall)cObjAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cParamAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cParamSTRINGTerminalRuleCall_2_0_0 = (RuleCall)cParamAssignment_2_0.eContents().get(0);
		private final Assignment cParamAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cParamIDTerminalRuleCall_2_1_0 = (RuleCall)cParamAssignment_2_1.eContents().get(0);
		
		//Instruction:
		//	cmd=Commande obj=Objet? (param=STRING | param=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//cmd=Commande obj=Objet? (param=STRING | param=ID)?
		public Group getGroup() { return cGroup; }
		
		//cmd=Commande
		public Assignment getCmdAssignment_0() { return cCmdAssignment_0; }
		
		//Commande
		public RuleCall getCmdCommandeParserRuleCall_0_0() { return cCmdCommandeParserRuleCall_0_0; }
		
		//obj=Objet?
		public Assignment getObjAssignment_1() { return cObjAssignment_1; }
		
		//Objet
		public RuleCall getObjObjetParserRuleCall_1_0() { return cObjObjetParserRuleCall_1_0; }
		
		//(param=STRING | param=ID)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//param=STRING
		public Assignment getParamAssignment_2_0() { return cParamAssignment_2_0; }
		
		//STRING
		public RuleCall getParamSTRINGTerminalRuleCall_2_0_0() { return cParamSTRINGTerminalRuleCall_2_0_0; }
		
		//param=ID
		public Assignment getParamAssignment_2_1() { return cParamAssignment_2_1; }
		
		//ID
		public RuleCall getParamIDTerminalRuleCall_2_1_0() { return cParamIDTerminalRuleCall_2_1_0; }
	}
	public class FonctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Fonction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarVariableParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cCountResultKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cReadtextKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_1_1_0 = (RuleCall)cValueAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cReadurlKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cValueAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_2_1_0 = (RuleCall)cValueAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		
		//Fonction:
		//	var=Variable ('countResult' | 'readtext(' value=STRING ')' | 'readurl(' value=STRING ')');
		@Override public ParserRule getRule() { return rule; }
		
		//var=Variable ('countResult' | 'readtext(' value=STRING ')' | 'readurl(' value=STRING ')')
		public Group getGroup() { return cGroup; }
		
		//var=Variable
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//Variable
		public RuleCall getVarVariableParserRuleCall_0_0() { return cVarVariableParserRuleCall_0_0; }
		
		//'countResult' | 'readtext(' value=STRING ')' | 'readurl(' value=STRING ')'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'countResult'
		public Keyword getCountResultKeyword_1_0() { return cCountResultKeyword_1_0; }
		
		//'readtext(' value=STRING ')'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'readtext('
		public Keyword getReadtextKeyword_1_1_0() { return cReadtextKeyword_1_1_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1_1_1() { return cValueAssignment_1_1_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_1_1_0() { return cValueSTRINGTerminalRuleCall_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
		
		//'readurl(' value=STRING ')'
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'readurl('
		public Keyword getReadurlKeyword_1_2_0() { return cReadurlKeyword_1_2_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1_2_1() { return cValueAssignment_1_2_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_2_1_0() { return cValueSTRINGTerminalRuleCall_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2_2() { return cRightParenthesisKeyword_1_2_2; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Variable:
		//	'var'? name=ID '=';
		@Override public ParserRule getRule() { return rule; }
		
		//'var'? name=ID '='
		public Group getGroup() { return cGroup; }
		
		//'var'?
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
	}
	public class VerifyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Verify");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerifyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cCompareAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cCompareCompareParserRuleCall_1_0_0 = (RuleCall)cCompareAssignment_1_0.eContents().get(0);
		private final Assignment cContainsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cContainsContainsParserRuleCall_1_1_0 = (RuleCall)cContainsAssignment_1_1.eContents().get(0);
		
		//Verify:
		//	'verify' (compare=Compare | contains=Contains);
		@Override public ParserRule getRule() { return rule; }
		
		//'verify' (compare=Compare | contains=Contains)
		public Group getGroup() { return cGroup; }
		
		//'verify'
		public Keyword getVerifyKeyword_0() { return cVerifyKeyword_0; }
		
		//compare=Compare | contains=Contains
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//compare=Compare
		public Assignment getCompareAssignment_1_0() { return cCompareAssignment_1_0; }
		
		//Compare
		public RuleCall getCompareCompareParserRuleCall_1_0_0() { return cCompareCompareParserRuleCall_1_0_0; }
		
		//contains=Contains
		public Assignment getContainsAssignment_1_1() { return cContainsAssignment_1_1; }
		
		//Contains
		public RuleCall getContainsContainsParserRuleCall_1_1_0() { return cContainsContainsParserRuleCall_1_1_0; }
	}
	public class CompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Compare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableIDTerminalRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValueIDTerminalRuleCall_2_0_0 = (RuleCall)cValueAssignment_2_0.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//Compare:
		//	variable=ID '==' (value=ID | value=STRING);
		@Override public ParserRule getRule() { return rule; }
		
		//variable=ID '==' (value=ID | value=STRING)
		public Group getGroup() { return cGroup; }
		
		//variable=ID
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//ID
		public RuleCall getVariableIDTerminalRuleCall_0_0() { return cVariableIDTerminalRuleCall_0_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1() { return cEqualsSignEqualsSignKeyword_1; }
		
		//value=ID | value=STRING
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//value=ID
		public Assignment getValueAssignment_2_0() { return cValueAssignment_2_0; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_2_0_0() { return cValueIDTerminalRuleCall_2_0_0; }
		
		//value=STRING
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_1_0() { return cValueSTRINGTerminalRuleCall_2_1_0; }
	}
	public class ContainsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Contains");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContainsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cObjAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cObjObjetParserRuleCall_1_0 = (RuleCall)cObjAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValueIDTerminalRuleCall_2_0_0 = (RuleCall)cValueAssignment_2_0.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//Contains:
		//	'contains' obj=Objet (value=ID | value=STRING);
		@Override public ParserRule getRule() { return rule; }
		
		//'contains' obj=Objet (value=ID | value=STRING)
		public Group getGroup() { return cGroup; }
		
		//'contains'
		public Keyword getContainsKeyword_0() { return cContainsKeyword_0; }
		
		//obj=Objet
		public Assignment getObjAssignment_1() { return cObjAssignment_1; }
		
		//Objet
		public RuleCall getObjObjetParserRuleCall_1_0() { return cObjObjetParserRuleCall_1_0; }
		
		//value=ID | value=STRING
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//value=ID
		public Assignment getValueAssignment_2_0() { return cValueAssignment_2_0; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_2_0_0() { return cValueIDTerminalRuleCall_2_0_0; }
		
		//value=STRING
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_1_0() { return cValueSTRINGTerminalRuleCall_2_1_0; }
	}
	public class ObjetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Objet");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLinkKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTextKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cButtonKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cImageKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cAllKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cTitleKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cComboboxKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cEverythingKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//Objet:
		//	'link' | 'text' | 'button' | 'image' | 'all' | 'title' | 'combobox' | 'everything';
		@Override public ParserRule getRule() { return rule; }
		
		//'link' | 'text' | 'button' | 'image' | 'all' | 'title' | 'combobox' | 'everything'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'link'
		public Keyword getLinkKeyword_0() { return cLinkKeyword_0; }
		
		//'text'
		public Keyword getTextKeyword_1() { return cTextKeyword_1; }
		
		//'button'
		public Keyword getButtonKeyword_2() { return cButtonKeyword_2; }
		
		//'image'
		public Keyword getImageKeyword_3() { return cImageKeyword_3; }
		
		//'all'
		public Keyword getAllKeyword_4() { return cAllKeyword_4; }
		
		//'title'
		public Keyword getTitleKeyword_5() { return cTitleKeyword_5; }
		
		//'combobox'
		public Keyword getComboboxKeyword_6() { return cComboboxKeyword_6; }
		
		//'everything'
		public Keyword getEverythingKeyword_7() { return cEverythingKeyword_7; }
	}
	public class CommandeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Commande");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cClickKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cUncheckKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSearchKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cChooseKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cUrlKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cCheckKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//Commande:
		//	'click' | 'uncheck' | 'search' | 'choose' | 'url' | 'check';
		@Override public ParserRule getRule() { return rule; }
		
		//'click' | 'uncheck' | 'search' | 'choose' | 'url' | 'check'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'click'
		public Keyword getClickKeyword_0() { return cClickKeyword_0; }
		
		//'uncheck'
		public Keyword getUncheckKeyword_1() { return cUncheckKeyword_1; }
		
		//'search'
		public Keyword getSearchKeyword_2() { return cSearchKeyword_2; }
		
		//'choose'
		public Keyword getChooseKeyword_3() { return cChooseKeyword_3; }
		
		//'url'
		public Keyword getUrlKeyword_4() { return cUrlKeyword_4; }
		
		//'check'
		public Keyword getCheckKeyword_5() { return cCheckKeyword_5; }
	}
	public class ForeachElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Foreach");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForeachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cStatsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatsStatementParserRuleCall_2_0 = (RuleCall)cStatsAssignment_2.eContents().get(0);
		private final Keyword cEndforeachKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Foreach:
		//	'foreach' value=ID stats+=Statement* 'endforeach';
		@Override public ParserRule getRule() { return rule; }
		
		//'foreach' value=ID stats+=Statement* 'endforeach'
		public Group getGroup() { return cGroup; }
		
		//'foreach'
		public Keyword getForeachKeyword_0() { return cForeachKeyword_0; }
		
		//value=ID
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_1_0() { return cValueIDTerminalRuleCall_1_0; }
		
		//stats+=Statement*
		public Assignment getStatsAssignment_2() { return cStatsAssignment_2; }
		
		//Statement
		public RuleCall getStatsStatementParserRuleCall_2_0() { return cStatsStatementParserRuleCall_2_0; }
		
		//'endforeach'
		public Keyword getEndforeachKeyword_3() { return cEndforeachKeyword_3; }
	}
	
	
	private final AutomateElements pAutomate;
	private final ProgramElements pProgram;
	private final InitElements pInit;
	private final StatementElements pStatement;
	private final TabElements pTab;
	private final InstructionElements pInstruction;
	private final FonctionElements pFonction;
	private final VariableElements pVariable;
	private final VerifyElements pVerify;
	private final CompareElements pCompare;
	private final ContainsElements pContains;
	private final ObjetElements pObjet;
	private final CommandeElements pCommande;
	private final ForeachElements pForeach;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAutomate = new AutomateElements();
		this.pProgram = new ProgramElements();
		this.pInit = new InitElements();
		this.pStatement = new StatementElements();
		this.pTab = new TabElements();
		this.pInstruction = new InstructionElements();
		this.pFonction = new FonctionElements();
		this.pVariable = new VariableElements();
		this.pVerify = new VerifyElements();
		this.pCompare = new CompareElements();
		this.pContains = new ContainsElements();
		this.pObjet = new ObjetElements();
		this.pCommande = new CommandeElements();
		this.pForeach = new ForeachElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Automate:
	//	program=Program;
	public AutomateElements getAutomateAccess() {
		return pAutomate;
	}
	
	public ParserRule getAutomateRule() {
		return getAutomateAccess().getRule();
	}
	
	//Program:
	//	'start'
	//	Init
	//	stats+=Statement*
	//	'end';
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Init:
	//	'open browser';
	public InitElements getInitAccess() {
		return pInit;
	}
	
	public ParserRule getInitRule() {
		return getInitAccess().getRule();
	}
	
	//Statement:
	//	Instruction | Tab | Fonction | Verify | Foreach;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Tab:
	//	v=Variable '[' values+=STRING (', ' values+=STRING)* ']';
	public TabElements getTabAccess() {
		return pTab;
	}
	
	public ParserRule getTabRule() {
		return getTabAccess().getRule();
	}
	
	//Instruction:
	//	cmd=Commande obj=Objet? (param=STRING | param=ID)?;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//Fonction:
	//	var=Variable ('countResult' | 'readtext(' value=STRING ')' | 'readurl(' value=STRING ')');
	public FonctionElements getFonctionAccess() {
		return pFonction;
	}
	
	public ParserRule getFonctionRule() {
		return getFonctionAccess().getRule();
	}
	
	//Variable:
	//	'var'? name=ID '=';
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Verify:
	//	'verify' (compare=Compare | contains=Contains);
	public VerifyElements getVerifyAccess() {
		return pVerify;
	}
	
	public ParserRule getVerifyRule() {
		return getVerifyAccess().getRule();
	}
	
	//Compare:
	//	variable=ID '==' (value=ID | value=STRING);
	public CompareElements getCompareAccess() {
		return pCompare;
	}
	
	public ParserRule getCompareRule() {
		return getCompareAccess().getRule();
	}
	
	//Contains:
	//	'contains' obj=Objet (value=ID | value=STRING);
	public ContainsElements getContainsAccess() {
		return pContains;
	}
	
	public ParserRule getContainsRule() {
		return getContainsAccess().getRule();
	}
	
	//Objet:
	//	'link' | 'text' | 'button' | 'image' | 'all' | 'title' | 'combobox' | 'everything';
	public ObjetElements getObjetAccess() {
		return pObjet;
	}
	
	public ParserRule getObjetRule() {
		return getObjetAccess().getRule();
	}
	
	//Commande:
	//	'click' | 'uncheck' | 'search' | 'choose' | 'url' | 'check';
	public CommandeElements getCommandeAccess() {
		return pCommande;
	}
	
	public ParserRule getCommandeRule() {
		return getCommandeAccess().getRule();
	}
	
	//Foreach:
	//	'foreach' value=ID stats+=Statement* 'endforeach';
	public ForeachElements getForeachAccess() {
		return pForeach;
	}
	
	public ParserRule getForeachRule() {
		return getForeachAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
