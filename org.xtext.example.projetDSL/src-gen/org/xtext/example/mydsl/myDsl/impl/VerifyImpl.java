/**
 * generated by Xtext 2.15.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.example.mydsl.myDsl.Compare;
import org.xtext.example.mydsl.myDsl.Contains;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.Verify;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Verify</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.VerifyImpl#getCompare <em>Compare</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.VerifyImpl#getContains <em>Contains</em>}</li>
 * </ul>
 *
 * @generated
 */
public class VerifyImpl extends StatementImpl implements Verify
{
  /**
   * The cached value of the '{@link #getCompare() <em>Compare</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompare()
   * @generated
   * @ordered
   */
  protected Compare compare;

  /**
   * The cached value of the '{@link #getContains() <em>Contains</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContains()
   * @generated
   * @ordered
   */
  protected Contains contains;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected VerifyImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.VERIFY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Compare getCompare()
  {
    return compare;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCompare(Compare newCompare, NotificationChain msgs)
  {
    Compare oldCompare = compare;
    compare = newCompare;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.VERIFY__COMPARE, oldCompare, newCompare);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCompare(Compare newCompare)
  {
    if (newCompare != compare)
    {
      NotificationChain msgs = null;
      if (compare != null)
        msgs = ((InternalEObject)compare).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.VERIFY__COMPARE, null, msgs);
      if (newCompare != null)
        msgs = ((InternalEObject)newCompare).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.VERIFY__COMPARE, null, msgs);
      msgs = basicSetCompare(newCompare, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.VERIFY__COMPARE, newCompare, newCompare));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Contains getContains()
  {
    return contains;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetContains(Contains newContains, NotificationChain msgs)
  {
    Contains oldContains = contains;
    contains = newContains;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.VERIFY__CONTAINS, oldContains, newContains);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setContains(Contains newContains)
  {
    if (newContains != contains)
    {
      NotificationChain msgs = null;
      if (contains != null)
        msgs = ((InternalEObject)contains).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.VERIFY__CONTAINS, null, msgs);
      if (newContains != null)
        msgs = ((InternalEObject)newContains).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.VERIFY__CONTAINS, null, msgs);
      msgs = basicSetContains(newContains, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.VERIFY__CONTAINS, newContains, newContains));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.VERIFY__COMPARE:
        return basicSetCompare(null, msgs);
      case MyDslPackage.VERIFY__CONTAINS:
        return basicSetContains(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.VERIFY__COMPARE:
        return getCompare();
      case MyDslPackage.VERIFY__CONTAINS:
        return getContains();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.VERIFY__COMPARE:
        setCompare((Compare)newValue);
        return;
      case MyDslPackage.VERIFY__CONTAINS:
        setContains((Contains)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.VERIFY__COMPARE:
        setCompare((Compare)null);
        return;
      case MyDslPackage.VERIFY__CONTAINS:
        setContains((Contains)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.VERIFY__COMPARE:
        return compare != null;
      case MyDslPackage.VERIFY__CONTAINS:
        return contains != null;
    }
    return super.eIsSet(featureID);
  }

} //VerifyImpl
