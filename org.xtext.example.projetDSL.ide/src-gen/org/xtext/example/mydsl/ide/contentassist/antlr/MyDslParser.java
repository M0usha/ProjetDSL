/*
 * generated by Xtext 2.15.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getInstructionAccess().getAlternatives_2(), "rule__Instruction__Alternatives_2");
			builder.put(grammarAccess.getFonctionAccess().getAlternatives_1(), "rule__Fonction__Alternatives_1");
			builder.put(grammarAccess.getVerifyAccess().getAlternatives_1(), "rule__Verify__Alternatives_1");
			builder.put(grammarAccess.getCompareAccess().getAlternatives_2(), "rule__Compare__Alternatives_2");
			builder.put(grammarAccess.getContainsAccess().getAlternatives_2(), "rule__Contains__Alternatives_2");
			builder.put(grammarAccess.getObjetAccess().getAlternatives(), "rule__Objet__Alternatives");
			builder.put(grammarAccess.getCommandeAccess().getAlternatives(), "rule__Commande__Alternatives");
			builder.put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
			builder.put(grammarAccess.getTabAccess().getGroup(), "rule__Tab__Group__0");
			builder.put(grammarAccess.getTabAccess().getGroup_3(), "rule__Tab__Group_3__0");
			builder.put(grammarAccess.getInstructionAccess().getGroup(), "rule__Instruction__Group__0");
			builder.put(grammarAccess.getFonctionAccess().getGroup(), "rule__Fonction__Group__0");
			builder.put(grammarAccess.getFonctionAccess().getGroup_1_1(), "rule__Fonction__Group_1_1__0");
			builder.put(grammarAccess.getFonctionAccess().getGroup_1_2(), "rule__Fonction__Group_1_2__0");
			builder.put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
			builder.put(grammarAccess.getVerifyAccess().getGroup(), "rule__Verify__Group__0");
			builder.put(grammarAccess.getCompareAccess().getGroup(), "rule__Compare__Group__0");
			builder.put(grammarAccess.getContainsAccess().getGroup(), "rule__Contains__Group__0");
			builder.put(grammarAccess.getForeachAccess().getGroup(), "rule__Foreach__Group__0");
			builder.put(grammarAccess.getAutomateAccess().getProgramAssignment(), "rule__Automate__ProgramAssignment");
			builder.put(grammarAccess.getProgramAccess().getStatsAssignment_2(), "rule__Program__StatsAssignment_2");
			builder.put(grammarAccess.getTabAccess().getVAssignment_0(), "rule__Tab__VAssignment_0");
			builder.put(grammarAccess.getTabAccess().getValuesAssignment_2(), "rule__Tab__ValuesAssignment_2");
			builder.put(grammarAccess.getTabAccess().getValuesAssignment_3_1(), "rule__Tab__ValuesAssignment_3_1");
			builder.put(grammarAccess.getInstructionAccess().getCmdAssignment_0(), "rule__Instruction__CmdAssignment_0");
			builder.put(grammarAccess.getInstructionAccess().getObjAssignment_1(), "rule__Instruction__ObjAssignment_1");
			builder.put(grammarAccess.getInstructionAccess().getParamAssignment_2_0(), "rule__Instruction__ParamAssignment_2_0");
			builder.put(grammarAccess.getInstructionAccess().getParamAssignment_2_1(), "rule__Instruction__ParamAssignment_2_1");
			builder.put(grammarAccess.getFonctionAccess().getVarAssignment_0(), "rule__Fonction__VarAssignment_0");
			builder.put(grammarAccess.getFonctionAccess().getValueAssignment_1_1_1(), "rule__Fonction__ValueAssignment_1_1_1");
			builder.put(grammarAccess.getFonctionAccess().getValueAssignment_1_2_1(), "rule__Fonction__ValueAssignment_1_2_1");
			builder.put(grammarAccess.getVariableAccess().getNameAssignment_1(), "rule__Variable__NameAssignment_1");
			builder.put(grammarAccess.getVerifyAccess().getCompareAssignment_1_0(), "rule__Verify__CompareAssignment_1_0");
			builder.put(grammarAccess.getVerifyAccess().getContainsAssignment_1_1(), "rule__Verify__ContainsAssignment_1_1");
			builder.put(grammarAccess.getCompareAccess().getVariableAssignment_0(), "rule__Compare__VariableAssignment_0");
			builder.put(grammarAccess.getCompareAccess().getValueAssignment_2_0(), "rule__Compare__ValueAssignment_2_0");
			builder.put(grammarAccess.getCompareAccess().getValueAssignment_2_1(), "rule__Compare__ValueAssignment_2_1");
			builder.put(grammarAccess.getContainsAccess().getObjAssignment_1(), "rule__Contains__ObjAssignment_1");
			builder.put(grammarAccess.getContainsAccess().getValueAssignment_2_0(), "rule__Contains__ValueAssignment_2_0");
			builder.put(grammarAccess.getContainsAccess().getValueAssignment_2_1(), "rule__Contains__ValueAssignment_2_1");
			builder.put(grammarAccess.getForeachAccess().getValueAssignment_1(), "rule__Foreach__ValueAssignment_1");
			builder.put(grammarAccess.getForeachAccess().getStatsAssignment_2(), "rule__Foreach__StatsAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
