/*
 * generated by Xtext 2.15.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.myDsl.*
import org.xtext.example.mydsl.myDsl.Automate

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		fsa.generateFile(
			'Main.java',
			// resource.allContents.toIterable.filter(Calendar).head.generateCalendar
			resource.contents.filter(Automate).head.generateAutomate);
		
	}
		
		def generateAutomate(Automate automate) '''
		
				import org.xtext.example.mydsl.myDsl.*
				import java.util.HashMap;
				import java.util.List;
				import java.util.ArrayList;
				import java.util.Map;		
				import org.openqa.selenium.*;
				import org.openqa.selenium.firefox.FirefoxDriver;
				import org.openqa.selenium.remote.DesiredCapabilities;
		
				public class Main {
					public static void main(String[] args) {
						Map<String, Object> variables = new HashMap<String, Object>();
						boolean result = true;
						«automate.generateProgram(automate.program)»
					} 
		}
		
		'''
		
		def generateProgram(Automate automate, Program prog) '''
		
		
		
		'''
		
}
