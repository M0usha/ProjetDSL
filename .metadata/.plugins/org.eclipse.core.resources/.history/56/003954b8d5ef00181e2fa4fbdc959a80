/*
 * generated by Xtext 2.15.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.myDsl.*
import org.xtext.example.mydsl.myDsl.Automate
import org.xtext.example.mydsl.myDsl.Statement
import org.xtext.example.mydsl.myDsl.Instruction
import org.xtext.example.mydsl.myDsl.Tab
import org.xtext.example.mydsl.myDsl.Fonction
import org.xtext.example.mydsl.myDsl.Verify
import org.xtext.example.mydsl.myDsl.Foreach

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		fsa.generateFile(
			'Main.java',
			// resource.allContents.toIterable.filter(Calendar).head.generateCalendar
			resource.contents.filter(Automate).head.generateAutomate);
		
	}
		
		def generateAutomate(Automate automate) '''
		
				import org.xtext.example.mydsl.myDsl.*;
				import java.util.HashMap;
				import java.util.List;
				import java.util.ArrayList;
				import java.util.Map;		
				import org.openqa.selenium.*;
				import org.openqa.selenium.firefox.FirefoxDriver;
				import org.openqa.selenium.remote.DesiredCapabilities;
		
				public class Main {
					public static void main(String[] args) {
						Map<String, Object> variables = new HashMap<String, Object>();
						boolean result = true;
						«automate.generateProgram(automate.program)»
					} 
		}
		
		'''
		
		def generateProgram(Automate automate, Program prog) '''
				System.setProperty("webdriver.gecko.driver", "./geckodriver.exe");
				DesiredCapabilities capabilities = DesiredCapabilities.firefox();
				capabilities.setCapability("marionette", true);
				WebDriver driver = new FirefoxDriver(capabilities);
				JavascriptExecutor jse = ((JavascriptExecutor)driver);
				driver.manage().timeouts().implicitlyWait(10, java.util.concurrent.TimeUnit.SECONDS);
				«FOR s : prog.stats»
					«s.generateStatement(prog.stats.indexOf(s))»
				«ENDFOR»
		'''
		
		def generateStatement(Statement statement, int i) '''
		
				«IF (statement instanceof Instruction)»
					«(statement as Instruction).generateInstruction()»
				«ENDIF»
				«IF (statement instanceof Tab)»
					«(statement as Tab).generateTab()»
				«ENDIF»
				«IF (statement instanceof Fonction)»
					«(statement as Fonction).generateFonction()»
				«ENDIF»
				«IF (statement instanceof Verify)»
					«(statement as Verify).generateVerify()»
				«ENDIF»
				«IF (statement instanceof Foreach)»
					«(statement as Foreach).generateForeach()»
				«ENDIF»
					
		
		'''
		
		def generateForeach(Foreach foreach) '''
		
		
		
		'''
		
		def generateVerify(Verify verify) '''
		
		
		
		'''
				
		def generateFonction(Fonction fonction) '''
		
		
		
		'''
		
		def generateTab(Tab tab) '''
		
		
		
		'''
		
		def generateInstruction(Instruction instruction) '''
				
				
		
		
		'''
		
}
